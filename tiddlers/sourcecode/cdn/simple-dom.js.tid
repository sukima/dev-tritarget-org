title: sourcecode/cdn/simple-dom.js
type: text/prs.sourcecode

<pre class="vimCodeElement">
<span class="Comment">/*******************************************/</span>
<span class="Comment">/* Version 1.2.0                           */</span>
<span class="Comment">/* License MIT                             */</span>
<span class="Comment">/* Copyright (C) 2022 Devin Weaver         */</span>
<span class="Comment">/* <a href="https://tritarget.org/cdn/simple-dom.js">https://tritarget.org/cdn/simple-dom.js</a> */</span>
<span class="Comment">/*******************************************/</span>

<span class="Comment">/**</span>
<span class="Comment"> * This micro lib is a compact and simple method to interact with the DOM. It</span>
<span class="Comment"> * facilitates the query mechanisms that querySelector and querySelectorAll use</span>
<span class="Comment"> * but in a compact fluent API. It also makes adding (and removing) events</span>
<span class="Comment"> * easy.</span>
<span class="Comment"> *</span>
<span class="Comment"> * Tests: <a href="https://tritarget.org/cdn/tests/simple-dom-test.js">https://tritarget.org/cdn/tests/simple-dom-test.js</a></span>
<span class="Comment"> *</span>
<span class="Comment"> * ## Query single element</span>
<span class="Comment"> *</span>
<span class="Comment"> * Queries are performed by property lookups. It will use querySelector()</span>
<span class="Comment"> * first. If that doesn't find anything it will default to getElementById().</span>
<span class="Comment"> *</span>
<span class="Comment"> * Calling methods/properties on the Element will be proxied. If however you</span>
<span class="Comment"> * need access to the actual Element use `.element`.</span>
<span class="Comment"> *</span>
<span class="Comment"> * </span><span class="Special">@example</span>
<span class="Comment"> * ```js</span>
<span class="Comment"> * import $ from '<a href="https://tritarget.org/cdn/simple-dom.js">https://tritarget.org/cdn/simple-dom.js</a>';</span>
<span class="Comment"> *</span>
<span class="Comment"> * // By ID</span>
<span class="Comment"> * $.anElementId.dataset.foo;</span>
<span class="Comment"> * $['#anElementId']dataset.foo;</span>
<span class="Comment"> *</span>
<span class="Comment"> * // By CSS selection</span>
<span class="Comment"> * $['.foobar'].classList.add('list-item');</span>
<span class="Comment"> * $['ul li'].classList.add('first-list-item');</span>
<span class="Comment"> * $['button[data-action]'].on.click(() =&gt; console.count('button action'));</span>
<span class="Comment"> * doSomethingWithRawElement($.foobar.element);</span>
<span class="Comment"> * ```</span>
<span class="Comment"> *</span>
<span class="Comment"> * ## Query many elements</span>
<span class="Comment"> *</span>
<span class="Comment"> * Selecting multiple can be opt-in with the `.all` property.</span>
<span class="Comment"> *</span>
<span class="Comment"> * Calling methods/properties on the NodeList will be proxied. If however you</span>
<span class="Comment"> * need access to the actual NodeList use `.elements`.</span>
<span class="Comment"> *</span>
<span class="Comment"> * </span><span class="Special">@example</span>
<span class="Comment"> * ```js</span>
<span class="Comment"> * $.all['ul li'].classList.add('list-item');</span>
<span class="Comment"> * $.all['button'].on.click(() =&gt; { … });</span>
<span class="Comment"> * doSomethingWithRawNodeList($.all['.foobar'].elements);</span>
<span class="Comment"> * ```</span>
<span class="Comment"> *</span>
<span class="Comment"> * ## Events</span>
<span class="Comment"> *</span>
<span class="Comment"> * Events can be attach with the `.on` property followed by the event name as</span>
<span class="Comment"> * a function with the callback passed in. When attaching events it will return</span>
<span class="Comment"> * a teardown function.</span>
<span class="Comment"> *</span>
<span class="Comment"> * </span><span class="Special">@example</span>
<span class="Comment"> * ```js</span>
<span class="Comment"> * let off = $.on.keyup(() =&gt; { … }); // attach listener</span>
<span class="Comment"> * off(); // remove listener</span>
<span class="Comment"> *</span>
<span class="Comment"> * $.button.on.click(() =&gt; { … });</span>
<span class="Comment"> * $.all['.btn'].on.customEvent(() =&gt; { … });</span>
<span class="Comment"> * ```</span>
<span class="Comment"> *</span>
<span class="Comment"> * Events can also be iterated over like a stream</span>
<span class="Comment"> *</span>
<span class="Comment"> * </span><span class="Special">@example</span>
<span class="Comment"> * ```js</span>
<span class="Comment"> * let buttonClicks = $.button.on.click();</span>
<span class="Comment"> * for await (let event of buttonClicks) { … }</span>
<span class="Comment"> * ```</span>
<span class="Comment"> *</span>
<span class="Comment"> * ## Creation</span>
<span class="Comment"> *</span>
<span class="Comment"> * Just because the typical createElement procedures can be a little tedius.</span>
<span class="Comment"> *</span>
<span class="Comment"> * </span><span class="Special">@example</span>
<span class="Comment"> * ```js</span>
<span class="Comment"> * $.new.div({ class: 'foo bar' });</span>
<span class="Comment"> * $.new.div({ text: 'foobar' });</span>
<span class="Comment"> * $.new.div({ text: 'foobar' });</span>
<span class="Comment"> * ```</span>
<span class="Comment"> */</span>

<span class="Type">const</span> proxies <span class="Statement">=</span> <span class="Statement">new</span> <span class="Constant">WeakSet</span>();

<span class="Type">function</span> <span class="Identifier">attachEvents</span>(el, eventNames, fn, options) {
  eventNames.<span class="Identifier">forEach</span>((e) <span class="Type">=&gt;</span> el.<span class="Identifier">addEventListener</span>(e, fn, options));
  <span class="Statement">return</span> <span class="Type">()</span> <span class="Type">=&gt;</span>
    eventNames.<span class="Identifier">forEach</span>((e) <span class="Type">=&gt;</span> el.<span class="Identifier">removeEventListener</span>(e, fn, options));
}

<span class="Type">function</span> <span class="Identifier">attachAll</span>(elements, eventNames, fn, options) {
  <span class="Type">let</span> detachables <span class="Statement">=</span>
    elements.<span class="Identifier">map</span>(e <span class="Type">=&gt;</span> <span class="Identifier">attachEvents</span>(e, eventNames, fn, options));
  <span class="Statement">return</span> <span class="Type">()</span> <span class="Type">=&gt;</span> detachables.<span class="Identifier">forEach</span>(i <span class="Type">=&gt;</span> <span class="Identifier">i</span>());
}

<span class="Type">function</span> <span class="Identifier">eventStreamManager</span>(elements, eventNames, options) {
  <span class="Statement">async</span> <span class="Type">function</span><span class="Type">*</span> <span class="Identifier">events</span>() {
    <span class="Type">let</span> done;
    <span class="Type">let</span> handler <span class="Statement">=</span> (event) <span class="Type">=&gt;</span> <span class="Identifier">done</span>(event);
    <span class="Type">let</span> nextEvent <span class="Statement">=</span> <span class="Type">()</span> <span class="Type">=&gt;</span> <span class="Statement">new</span> <span class="Constant">Promise</span>(r <span class="Type">=&gt;</span> { done <span class="Statement">=</span> r; });
    <span class="Type">let</span> detachAll <span class="Statement">=</span> <span class="Identifier">attachAll</span>(elements, eventNames, handler, options);
    <span class="Statement">try</span> { <span class="Statement">while</span> (<span class="Constant">true</span>) <span class="Statement">yield</span> <span class="Identifier">nextEvent</span>(); }
    <span class="Statement">finally</span> { <span class="Identifier">detachAll</span>(); }
  }

  <span class="Statement">return</span> { events, [<span class="Constant">Symbol</span>.asyncIterator]: events };
}

<span class="Type">function</span> <span class="Identifier">eventable</span>(<span class="Statement">...</span>elements) {
  <span class="Statement">return</span> <span class="Statement">new</span> <span class="Constant">Proxy</span>({}, {
    <span class="Identifier">get</span>(_, prop) {
      <span class="Type">let</span> eventNames <span class="Statement">=</span> prop.<span class="Identifier">split</span>(<span class="Constant">','</span>);
      <span class="Statement">return</span> (fn, options) <span class="Type">=&gt;</span> {
        <span class="Statement">if</span> (<span class="Statement">typeof</span> fn <span class="Statement">===</span> <span class="Constant">'function'</span>)
          <span class="Statement">return</span> <span class="Identifier">attachAll</span>(elements, eventNames, fn, options);
        <span class="Statement">else</span>
          <span class="Statement">return</span> <span class="Identifier">eventStreamManager</span>(elements, eventNames, fn);
      };
    },
  });
}

<span class="Type">function</span> <span class="Identifier">wrapper</span>(fn) {
  <span class="Statement">return</span> subject <span class="Type">=&gt;</span> {
    <span class="Statement">if</span> (proxies.<span class="Identifier">has</span>(subject)) { <span class="Statement">return</span> subject; }
    <span class="Type">let</span> result <span class="Statement">=</span> <span class="Identifier">fn</span>(subject);
    proxies.<span class="Identifier">add</span>(result);
    <span class="Statement">return</span> result;
  };
}

<span class="Type">function</span> <span class="Identifier">domAll</span>(element) {
  <span class="Type">const</span> queryWrap <span class="Statement">=</span> <span class="Identifier">wrapper</span>(prop <span class="Type">=&gt;</span> {
    <span class="Statement">return</span> <span class="Statement">new</span> <span class="Constant">Proxy</span>([<span class="Statement">...</span>element.<span class="Identifier">querySelectorAll</span>(prop)].<span class="Identifier">map</span>(dom), {
      <span class="Identifier">get</span>(target, prop) {
        <span class="Statement">switch</span> (prop) {
          <span class="Statement">case</span> <span class="Constant">'elements'</span>: <span class="Statement">return</span> target.<span class="Identifier">map</span>(i <span class="Type">=&gt;</span> i.element);
          <span class="Statement">case</span> <span class="Constant">'on'</span>: <span class="Statement">return</span> <span class="Identifier">eventable</span>(...target.<span class="Identifier">map</span>(i <span class="Type">=&gt;</span> i.element));
        }
        <span class="Statement">return</span> <span class="Constant">Reflect</span>.<span class="Identifier">get</span>(target, prop);
      },
      <span class="Identifier">set</span>(target, prop, value) {
        <span class="Statement">return</span> <span class="Constant">Reflect</span>.<span class="Identifier">set</span>(target, prop, value);
      },
    });
  });

  <span class="Statement">return</span> <span class="Identifier">wrapper</span>(<span class="Type">()</span> <span class="Type">=&gt;</span> <span class="Statement">new</span> <span class="Constant">Proxy</span>(queryWrap, {
    <span class="Identifier">get</span>(_, prop) {
      <span class="Statement">return</span> <span class="Identifier">queryWrap</span>(prop);
    },
  }))();
}

<span class="Type">function</span> <span class="Identifier">elementCreaterFor</span>(tag) {
  <span class="Statement">return</span> <span class="Type">function</span> <span class="Identifier">createElement</span>(configs = {}) {
    <span class="Type">let</span> element <span class="Statement">=</span> <span class="Constant">document</span>.<span class="Identifier">createElement</span>(tag);
    <span class="Statement">for</span> (<span class="Type">let</span> [key, value] <span class="Statement">of</span> <span class="Constant">Object</span>.<span class="Identifier">entries</span>(configs)) {
      <span class="Statement">switch</span> (key) {
        <span class="Statement">case</span> <span class="Constant">'classes'</span>:
          element.classList.<span class="Identifier">add</span>(...value);
          <span class="Statement">break</span>;
        <span class="Statement">case</span> <span class="Constant">'class'</span>:
          element.className <span class="Statement">=</span> value;
          <span class="Statement">break</span>;
        <span class="Statement">case</span> <span class="Constant">'data'</span>:
          <span class="Constant">Object</span>.<span class="Identifier">assign</span>(element.dataset, value);
          <span class="Statement">break</span>;
        <span class="Statement">case</span> <span class="Constant">'attrs'</span>:
          <span class="Constant">Object</span>.<span class="Identifier">entries</span>(value).<span class="Identifier">forEach</span>(([k, v]) <span class="Type">=&gt;</span> element.<span class="Identifier">setAttribute</span>(k, v));
          <span class="Statement">break</span>;
        <span class="Statement">case</span> <span class="Constant">'text'</span>:
          element.textContent <span class="Statement">=</span> value;
          <span class="Statement">break</span>;
        <span class="Statement">case</span> <span class="Constant">'html'</span>:
          element.innerHTML <span class="Statement">=</span> value;
          <span class="Statement">break</span>;
        <span class="Statement">default</span>:
          element[key] <span class="Statement">=</span> value;
      }
    }
    <span class="Statement">return</span> element;
  }
}

<span class="Type">function</span> <span class="Identifier">creatable</span>() {
  <span class="Statement">return</span> <span class="Statement">new</span> <span class="Constant">Proxy</span>({}, {
    <span class="Identifier">get</span>(_, prop) {
      <span class="Statement">return</span> <span class="Identifier">elementCreaterFor</span>(prop);
    },
  });
}

<span class="Type">function</span> <span class="Identifier">dom</span>(element) {
  <span class="Type">const</span> queryWrap <span class="Statement">=</span> <span class="Identifier">wrapper</span>(prop <span class="Type">=&gt;</span> {
    <span class="Statement">return</span> prop <span class="Statement">instanceof</span> <span class="Constant">Node</span>
      <span class="Statement">?</span> <span class="Identifier">dom</span>(prop)
      <span class="Statement">:</span> <span class="Identifier">dom</span>(element.<span class="Identifier">querySelector</span>(prop) <span class="Statement">??</span> <span class="Constant">document</span>.<span class="Identifier">getElementById</span>(prop));
  });

  <span class="Statement">return</span> <span class="Identifier">wrapper</span>(<span class="Type">()</span> <span class="Type">=&gt;</span> <span class="Statement">new</span> <span class="Constant">Proxy</span>(queryWrap, {
    <span class="Identifier">get</span>(_, prop) {
      <span class="Statement">switch</span> (prop) {
        <span class="Statement">case</span> <span class="Constant">'element'</span>: <span class="Statement">return</span> element;
        <span class="Statement">case</span> <span class="Constant">'all'</span>: <span class="Statement">return</span> <span class="Identifier">domAll</span>(element);
        <span class="Statement">case</span> <span class="Constant">'new'</span>: <span class="Statement">return</span> <span class="Identifier">creatable</span>();
        <span class="Statement">case</span> <span class="Constant">'on'</span>:
          <span class="Statement">return</span> <span class="Identifier">eventable</span>(element <span class="Statement">===</span> <span class="Constant">document</span> <span class="Statement">?</span> <span class="Constant">document</span>.body <span class="Statement">:</span> element);
      }
      <span class="Statement">if</span> (<span class="Constant">Reflect</span>.<span class="Identifier">has</span>(element, prop)) {
        <span class="Type">let</span> thing <span class="Statement">=</span> <span class="Constant">Reflect</span>.<span class="Identifier">get</span>(element, prop);
        <span class="Statement">return</span> <span class="Statement">typeof</span> thing <span class="Statement">===</span> <span class="Constant">'function'</span>
          <span class="Statement">?</span> (<span class="Statement">...</span>args) <span class="Type">=&gt;</span> thing.<span class="Identifier">call</span>(element, ...args)
          <span class="Statement">:</span> thing;
      }
      <span class="Statement">return</span> <span class="Identifier">queryWrap</span>(prop);
    },
    <span class="Identifier">set</span>(_, prop, value) {
      <span class="Statement">return</span> <span class="Constant">Reflect</span>.<span class="Identifier">set</span>(element, prop, value);
    },
  }))();
}

<span class="PreProc">export</span> <span class="Type">default</span> <span class="Identifier">dom</span>(<span class="Constant">document</span>);
</pre>
