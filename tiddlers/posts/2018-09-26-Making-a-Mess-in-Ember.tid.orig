creator: Sukima
created: 20180926123122000
modified: 20180926123122000
tags: Article Ember JavaScript Coding
title: Making a Mess in Ember
type: text/vnd.tiddlywiki

\define OOP() <abbr title="Object Orientated Programming">OOP</abbr>
\define video() {{$:/core/images/video}}

I've been a big fan of [[Sandi Metz|https://www.sandimetz.com/]] for quite some time. I've tried to watch every talk I can find on ~YouTube. In doing so I've notice several common themes, one of them is about ''dependency injections''.

In her talks she describes dependency injection as an <<OOP>> pattern that helps decouple the complexity people find in their programs. She describes two examples for dependency injection: ''Roles'' and ''Factories''. We will get to these concepts after we first talk about Ember's //Dependency Injection System//.

[[Ember's Object Model|EmberObject]] allows one to not only extend the objects but also override properties at creation time. In fact Ember's [[action closures|http://miguelcamba.com/blog/2016/01/24/ember-closure-actions-in-depth]] allow you to assign/override behavior on components by passing them functions. Ember also offers a dependency injection system. An example of this are services. When you tell an EmberObject that a property is a `service()` it will perform the dependency injection code under the hood for you. In this section I'd like to show you how that dependency injection works and how to use it in cases other then services.

This dependency injection system provides two things, a way to resolve objects by name and a way to bootstrap the instances created with the appropriate plumbing that supports lazy-injections (`Ember.inject.service()`).

Ember will associate an //owner// to the objects it creates. This owner object provides two //factory methods// which bootstraps the dependency injection system into the objects it creates. To gain access to this //owner// you use the `getOwner()` function:

<<<<<<< Updated upstream
In this example we will have an app that has two or more types of notifications. In some cases we want a popup, others we want desktop notifications, maybe in others we
||||||| merged common ancestors

=======
```javascript
import { getOwner } from '@ember/application';
EmberObject.extend({
  foo() {
    let owner = getOwner(this);
  }
});
```

Resolution of objects is managed by providing the `lookup` or `factoryFor` methods with a string that is colon separated between `type:name`. The type is singular and defined be initializers. In ''ember-cli'' the directory paths will auto define types for you to make thing more magical. For example with ''ember-cli'' a file located at `app/libs/foobar.js` will auto register a type of `lib` (singular) with an object named `foobar` resulting in a lookup of `lib:foobar`.
>>>>>>> Stashed changes

This can be customized by manually registering the type and class in a own custom initializer. But by default these objects are automagically registered with ember-cli. In the classic structure the type is the top level directory under the `app/` folder and the filename is the name of the class. In the pod structure the directory is the name and the filename is the type.

Names can also be nested under more directories. For example this is a valid lookup: `model:foobar/bazfoo`. The type however is always a single level and in singular form.

The difference between the two methods `lookup` and `factoryFor` is the former will find and instantiate it as a ''singleton''. Once instantiated further calls to `lookup` for that same object will be return the same instantiated singleton. This is how services are managed.

The later `factoryFor` will return a [[Factory Object|https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)]] that bootstraps the dependency injection and allows you to `.create()` an instance. Here is an example:

! Roles

! Factories

!! Sandi Metz Talks

* [["Go Ahead, Make a Mess"|https://www.youtube.com/watch?v=mpA2F1In41w]] <<video>>
* [["All the Little Things"|https://www.youtube.com/watch?v=8bZh5LMaSmE]] <<video>>
* [["Nothing is Something"|https://www.youtube.com/watch?v=OMPfEXIlTVE]] <<video>>
