created: 20220920211836000
creator: Sukima
modified: 20220920211836000
modifier: Sukima
title: Revisiting modal dialogs: Vanilla
type: text/vnd.tiddlywiki

\define oop() <abbr title="Object Orientated Programming">OOP</abbr>
\define sourceLinks()
* [[Live DEMO|https://tritarget.org/fiddles/?fiddle=modal-manager.html]]
* [[Source code|https://tritarget.org/cdn/modal-manager.js]]
* [[Tests|https://tritarget.org/cdn/tests/]]
\end

<aside class="float-right no-item-padding">

<<sourceLinks>>

</aside>

In plain HTML/JS we have the `<dialog>` element. It has two modes: non-modal and modal. Luckily, the code I’ll demonstrate will work for both. The dialog element has two methods `.show()` and `showModal()`. It can produce the following events: `cancel`, `click`, and `submit` (for when we use `<form method="dialog">`). We will need something that will listen for those events and correctly show/hide the dialog.

Taking inspiration from good <<oop>> design we can expand the ModalManager implementation we had earlier to delegate the open and close to a ''Controller''.

{{sourcecode/modal-manager-vanilla-00.js}}

With this we can construct any object that has an `open()` and `close()` method and when we use our modal manager it will properly instruct the controller to handle opening and closing.

For the HTML5 `<dialog>` this means attaching event listeners and calling the `showModal()` and `close()` methods of the element. Before we attach meaning to the different ways to manage a modal the initial class will start off like this:

{{sourcecode/modal-manager-vanilla-01.js}}

And invoke it with this:

{{sourcecode/modal-manager-vanilla-02.js}}

<<.tip """To make it a little easier you can make a factory function:""">>

{{sourcecode/modal-manager-vanilla-03.js}}

Now we will hook up events to properly trigger different ways of closing the dialog. There are three main ways to close a `<dialog>` via events. But first we need to make sure we can remove those events. Since JavaScript event handling needs the original function reference and they also need binding to properly handle the `this` keyword. In the latest versions of JavaScript we can do that easily with arrow functions assigned to private methods of a class.

{{sourcecode/modal-manager-vanilla-04.js}}

We can attach to these private methods and later remove them:

{{sourcecode/modal-manager-vanilla-05.js}}

`cancel` is an event that a ''modal'' dialog triggers when the user presses the <kbd>Escape</kbd> key to close it. This is only available when a `<dialog>` is opened via the `.showModal()` method.

Other ways to close the modal is via buttons we add. For example say we have the following markup:

{{sourcecode/modal-manager-vanilla-06.html}}

Then we can attach a `click` event to the `<dialog>` and use the `data-action` attribute to know how best to resolve the modal manager.

{{sourcecode/modal-manager-vanilla-07.js}}

<<.tip """You can pick any way you want to handle a value for confirm/reject or none at all. I choose to allow something via `data-value` or the dialog’s own `returnValue` for API compatibility and flexibility.""">>

If we want to capture the clicking of the `::backdrop` pseudo-element the click event will be triggered on the `<dialog>` itself which makes it easy to delegate by checking it `event.target` is the same as `this.element` ''as long as we place an inner `<div>` container''.

{{sourcecode/modal-manager-vanilla-08.html}}

{{sourcecode/modal-manager-vanilla-09.js}}

The specs also talk about placing forms inside dialogs. We can also capture that use case by adding a `submit` event listener. The cool part about this option is that unlike the `returnValue` we get from the API in the `submit` event we can convert the form values into a `FormData` object and ''confirm'' the modal manager with a full on object instead of a string value.

{{sourcecode/modal-manager-vanilla-10.html}}

{{sourcecode/modal-manager-vanilla-11.js}}

Nice thing about this is that the `submit` event doesn't happen till the form is considered valid. `method="dialog"` prevents any sending to the server (client side only form) and now you get the full breadth of options as `FormData` provides.

{{sourcecode/modal-manager-vanilla-12.js}}

You probably want to see this in action. Well I’ve developed a [[working DEMO|https://tritarget.org/fiddles/?fiddle=modal-manager.html]].

<<sourceLinks>>
